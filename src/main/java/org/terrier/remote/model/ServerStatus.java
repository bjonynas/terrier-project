/*
 * Remote Terrier API
 * This is an API to allow a client to search a remote index with Terrier
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 2133815j@student.gla.ac.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.terrier.remote.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * ServerStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-02-23T03:14:17.958Z")
public class ServerStatus   {
  @JsonProperty("usedMemory")
  private String usedMemory = null;

  @JsonProperty("availableMemory")
  private String availableMemory = null;

  @JsonProperty("numberOfIndexes")
  private String numberOfIndexes = null;

  public ServerStatus usedMemory(String usedMemory) {
    this.usedMemory = usedMemory;
    return this;
  }

  /**
   * Get usedMemory
   * @return usedMemory
   **/
  @JsonProperty("usedMemory")
  @ApiModelProperty(value = "")
  public String getUsedMemory() {
    return usedMemory;
  }

  public void setUsedMemory(String usedMemory) {
    this.usedMemory = usedMemory;
  }

  public ServerStatus availableMemory(String availableMemory) {
    this.availableMemory = availableMemory;
    return this;
  }

  /**
   * Get availableMemory
   * @return availableMemory
   **/
  @JsonProperty("availableMemory")
  @ApiModelProperty(value = "")
  public String getAvailableMemory() {
    return availableMemory;
  }

  public void setAvailableMemory(String availableMemory) {
    this.availableMemory = availableMemory;
  }

  public ServerStatus numberOfIndexes(String numberOfIndexes) {
    this.numberOfIndexes = numberOfIndexes;
    return this;
  }

  /**
   * nmber of imported indexes
   * @return numberOfIndexes
   **/
  @JsonProperty("numberOfIndexes")
  @ApiModelProperty(value = "nmber of imported indexes")
  public String getNumberOfIndexes() {
    return numberOfIndexes;
  }

  public void setNumberOfIndexes(String numberOfIndexes) {
    this.numberOfIndexes = numberOfIndexes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerStatus serverStatus = (ServerStatus) o;
    return Objects.equals(this.usedMemory, serverStatus.usedMemory) &&
        Objects.equals(this.availableMemory, serverStatus.availableMemory) &&
        Objects.equals(this.numberOfIndexes, serverStatus.numberOfIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usedMemory, availableMemory, numberOfIndexes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerStatus {\n");
    
    sb.append("    usedMemory: ").append(toIndentedString(usedMemory)).append("\n");
    sb.append("    availableMemory: ").append(toIndentedString(availableMemory)).append("\n");
    sb.append("    numberOfIndexes: ").append(toIndentedString(numberOfIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

