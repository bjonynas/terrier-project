/*
 * Terrier Remote API
 * This is an API to allow a client to search a remote index with Terrier
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 2133815j@student.gla.ac.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.terrier.remote.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.terrier.remote.model.KeyValue;
import java.util.ArrayList;
import java.util.List;

/**
 * RemoteSearchRequest
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-11-22T17:36:12.835Z")
public class RemoteSearchRequest   {
  @JsonProperty("queryId")
  private String queryId = null;

  @JsonProperty("controls")
  private List<KeyValue> controls = new ArrayList<KeyValue>();

  @JsonProperty("query")
  private String query = null;

  public RemoteSearchRequest queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

   /**
   * Get queryId
   * @return queryId
  **/
  @ApiModelProperty(example = "1", value = "")
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }

  public RemoteSearchRequest controls(List<KeyValue> controls) {
    this.controls = controls;
    return this;
  }

  public RemoteSearchRequest addControlsItem(KeyValue controlsItem) {
    this.controls.add(controlsItem);
    return this;
  }

   /**
   * Get controls
   * @return controls
  **/
  @ApiModelProperty(required = true, value = "")
  public List<KeyValue> getControls() {
    return controls;
  }

  public void setControls(List<KeyValue> controls) {
    this.controls = controls;
  }

  public RemoteSearchRequest query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @ApiModelProperty(example = "NUMBER REPRESENTATION IN BINARY MACHINES", required = true, value = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteSearchRequest remoteSearchRequest = (RemoteSearchRequest) o;
    return Objects.equals(this.queryId, remoteSearchRequest.queryId) &&
        Objects.equals(this.controls, remoteSearchRequest.controls) &&
        Objects.equals(this.query, remoteSearchRequest.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryId, controls, query);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteSearchRequest {\n");
    
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    controls: ").append(toIndentedString(controls)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

